[gd_scene load_steps=41 format=2]

[ext_resource path="res://Assets/Art/Main Characters/Virtual Guy/Jump (32x32).png" type="Texture" id=1]
[ext_resource path="res://Assets/Art/Main Characters/Virtual Guy/Fall (32x32).png" type="Texture" id=2]
[ext_resource path="res://Assets/Art/Main Characters/Virtual Guy/Idle (32x32).png" type="Texture" id=3]
[ext_resource path="res://Assets/Art/Main Characters/Virtual Guy/Run (32x32).png" type="Texture" id=4]
[ext_resource path="res://Assets/Art/Main Characters/Desappearing (96x96).png" type="Texture" id=5]
[ext_resource path="res://Assets/SFX/jump2.wav" type="AudioStream" id=6]
[ext_resource path="res://Assets/SFX/death.wav" type="AudioStream" id=7]

[sub_resource type="GDScript" id=26]
script/source = "extends KinematicBody2D

onready var sprite = $AnimatedSprite
onready var collider = $CollisionShape2D


export var playerSpeed : float = 200
export var gravityForce : float =  35
export var jumpForce : float = 500


# Used to keep track of the direction of gravityorgo
enum GRAV {
	DOWN,
	UP,
	LEFT,
	RIGHT
}


var gravityDir = GRAV.DOWN 
var gravity : Vector2 = Vector2.UP
var velocity = Vector2.ZERO
var normal_vector = Vector2.DOWN
var jumpVec : Vector2 = Vector2.ZERO
var is_dead : bool  = false
var gravDir_to_gravity = {
	GRAV.DOWN : Vector2.DOWN,
	GRAV.UP : Vector2.UP,
	GRAV.LEFT : Vector2.LEFT,
	GRAV.RIGHT : Vector2.RIGHT
} 





func _ready() -> void:
	SignalManager.connect(\"PlayerDeath\", self, \"death\")
	sprite.play(\"Idle\")


func _physics_process(delta: float) -> void:
	if is_dead:
		# Dont do anything if we are dead
		return
	_set_grav_vars()
	_move()
	
func _process(delta: float) -> void:
	if is_dead:
		# Dont do anything if we are dead
		return
	_handle_anim()
	_handle_velocity()
	_handle_gravity_input()


func _handle_gravity_input() -> void:
	# Set the state of gravity based on user input
	if Input.is_action_pressed(\"Grav_left\"):
		gravityDir = GRAV.LEFT
	elif Input.is_action_pressed(\"Grav_right\"):
		gravityDir = GRAV.RIGHT
	elif Input.is_action_pressed(\"Grav_up\"):
		gravityDir = GRAV.UP
	elif Input.is_action_pressed(\"Grav_down\"):
		gravityDir = GRAV.DOWN

		


func _handle_velocity() -> void:
	if(gravityDir == GRAV.DOWN || gravityDir == GRAV.UP):
		_handle_Up_Down_Velocity()
	else:
		_handle_Left_Right_Velocity()
		
	if Input.is_action_just_pressed(\"Jump\") && is_on_floor():
		_jump()
		
func _handle_anim() -> void:
	
	# Handle the state of the animation
	if(gravityDir == GRAV.DOWN || gravityDir == GRAV.UP):
		_handle_Up_Down_Anim()
	else:
		_handle_Left_Right_Anim()
		
	
	if !is_on_floor():
		if _is_falling():
			sprite.play(\"Fall\")
		else:
			sprite.play(\"Jump\")
	
	# Rotate the sprite to match gravity orientation 
	# TODO add tween
	match gravityDir:
		GRAV.DOWN:
			self.rotation = 0
		GRAV.UP:
			self.rotation = PI
		GRAV.RIGHT:
			self.rotation = -PI/2
		GRAV.LEFT:
			self.rotation = PI/2
	# Match the collider to the sprite
	# collider.rotation = sprite.rotation

		
func _set_grav_vars() -> void:
	# Use the gravity value to set the normal, direction of gravity, jump force, etc.
	gravity = gravDir_to_gravity[gravityDir]
	normal_vector = gravity * -1 # Normal is opposite of gravity direction
	
func _move() -> void:
	# Move the character
	velocity += gravity * gravityForce # TODO make gravity a vector, create a dict that maps enum of grav direction to vector of gravity
	velocity = move_and_slide(velocity, normal_vector)

func _is_falling() -> bool:
	# Check if the character is falling relative to the  gravity direction
	var temp : Vector2 = gravity * velocity
	
	return temp.x < 0 || temp.y > 0
	
func _jump() -> void:
	match gravityDir:
		GRAV.DOWN:
			velocity.y = -jumpForce
			$JumpAudio.play()
		GRAV.UP:
			velocity.y = jumpForce
			$JumpAudio.play()
		GRAV.RIGHT:
			velocity.x = -jumpForce
			$JumpAudio.play()
		GRAV.LEFT:
			velocity.x = jumpForce
			$JumpAudio.play()
			
func _handle_Up_Down_Velocity() -> void:
	
	# Handle Input that impacts velocity
	if Input.is_action_pressed(\"Left\"):

		velocity.x = -playerSpeed # TODO will need to make player speed a vector
	elif Input.is_action_pressed(\"Right\"):

		velocity.x = playerSpeed
	else:
		
		velocity.x = 0
		
func _handle_Left_Right_Velocity() -> void:
	
	# Handle Input that impacts velocity
	if Input.is_action_pressed(\"Up\"):

		velocity.y = -playerSpeed # TODO will need to make player speed a vector
	elif Input.is_action_pressed(\"Down\"):

		velocity.y = playerSpeed
	else:
		
		velocity.y = 0
		

func _handle_Left_Right_Anim() -> void:
	if Input.is_action_pressed(\"Up\"):
		sprite.play(\"Run\")
		sprite.flip_h = (gravityDir == GRAV.LEFT)
	elif Input.is_action_pressed(\"Down\"):
		sprite.play(\"Run\")
		sprite.flip_h = !(gravityDir == GRAV.LEFT)
	else:
		sprite.play(\"Idle\")
		
func _handle_Up_Down_Anim() -> void:
	if Input.is_action_pressed(\"Left\"):
		sprite.play(\"Run\")
		sprite.flip_h = (gravityDir == GRAV.DOWN)
	elif Input.is_action_pressed(\"Right\"):
		sprite.play(\"Run\")
		sprite.flip_h = !(gravityDir == GRAV.DOWN)
	else:
		sprite.play(\"Idle\")

func death() -> void:
	is_dead = true
	sprite.play(\"Death\")
	$CollisionShape2D.disabled = true
	$DieAudio.play()
	$Timer.start()








func _on_Timer_timeout() -> void:
	get_tree().reload_current_scene()
"

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 3 )
region = Rect2( 0, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 3 )
region = Rect2( 32, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 3 )
region = Rect2( 64, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 3 )
region = Rect2( 96, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 3 )
region = Rect2( 128, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 3 )
region = Rect2( 160, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 3 )
region = Rect2( 192, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=8]
atlas = ExtResource( 3 )
region = Rect2( 224, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 3 )
region = Rect2( 256, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=10]
atlas = ExtResource( 3 )
region = Rect2( 288, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 3 )
region = Rect2( 320, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=14]
atlas = ExtResource( 4 )
region = Rect2( 32, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 4 )
region = Rect2( 64, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 4 )
region = Rect2( 96, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 4 )
region = Rect2( 128, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 4 )
region = Rect2( 160, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 4 )
region = Rect2( 192, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=20]
atlas = ExtResource( 4 )
region = Rect2( 224, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=21]
atlas = ExtResource( 4 )
region = Rect2( 256, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=22]
atlas = ExtResource( 4 )
region = Rect2( 288, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=23]
atlas = ExtResource( 4 )
region = Rect2( 320, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=24]
atlas = ExtResource( 4 )
region = Rect2( 352, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=27]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 0, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=28]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 96, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=29]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 192, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=30]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 288, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=31]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 384, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=32]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 480, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=33]
flags = 4
atlas = ExtResource( 5 )
region = Rect2( 576, 0, 96, 96 )

[sub_resource type="SpriteFrames" id=12]
animations = [ {
"frames": [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ) ],
"loop": true,
"name": "Idle",
"speed": 15.0
}, {
"frames": [ ExtResource( 2 ) ],
"loop": false,
"name": "Fall",
"speed": 5.0
}, {
"frames": [ SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ), SubResource( 20 ), SubResource( 21 ), SubResource( 22 ), SubResource( 23 ), SubResource( 24 ) ],
"loop": true,
"name": "Run",
"speed": 20.0
}, {
"frames": [ ExtResource( 1 ) ],
"loop": false,
"name": "Jump",
"speed": 5.0
}, {
"frames": [ SubResource( 27 ), SubResource( 28 ), SubResource( 29 ), SubResource( 30 ), SubResource( 31 ), SubResource( 32 ), SubResource( 33 ) ],
"loop": false,
"name": "Death",
"speed": 15.0
} ]

[sub_resource type="RectangleShape2D" id=34]
extents = Vector2( 6.5, 11.5 )

[node name="Player" type="KinematicBody2D"]
collision_mask = 15
script = SubResource( 26 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
scale = Vector2( 1, 1.1875 )
frames = SubResource( 12 )
animation = "Idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0.5, 6.5 )
shape = SubResource( 34 )

[node name="Timer" type="Timer" parent="."]
wait_time = 0.55
one_shot = true

[node name="JumpAudio" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )

[node name="DieAudio" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 7 )

[node name="Node" type="Node" parent="."]

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
